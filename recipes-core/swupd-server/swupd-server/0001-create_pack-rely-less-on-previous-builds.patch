From 470b13dd69499a89f08f41722ff5ec714547908a Mon Sep 17 00:00:00 2001
From: Patrick Ohly <patrick.ohly@intel.com>
Date: Wed, 16 Nov 2016 14:26:30 +0100
Subject: [PATCH 2/6] create_pack: rely less on previous builds

When a file has not been modified in the current build, then by
definition the current copy of the file is the same as in the build
were it was last changed and thus it does not matter whether we use
<current build>/full/<file> or <last change>/full/<file>. But using
the current copy is better for a CI system which starts without local
access to older rootfs directories. It might also be a bit more
efficient (file access less scattered between different "full"
directories).

Staging directories is better than staging .tar archives containing
those directories for the same reason (the .tar archive might not be
available in the CI system) and probably also improves efficiency (no
need to invoke bsdtar just to create a directory; impact not
measured).

make_pack_full_files() and make_final_pack() used the exact same code
for populating the "staged" directory. Now that common code is in
stage_entry().

Upstream-Status: Submitted [https://github.com/clearlinux/swupd-server/pull/47]

Signed-off-by: Patrick Ohly <patrick.ohly@intel.com>

---
 include/swupd.h |   2 +-
 src/delta.c     |   4 +--
 src/pack.c      | 103 +++++++++++++++++++++++++-------------------------------
 3 files changed, 49 insertions(+), 60 deletions(-)

diff --git a/include/swupd.h b/include/swupd.h
index f1ca240..cf3c3b2 100644
--- a/include/swupd.h
+++ b/include/swupd.h
@@ -255,7 +255,7 @@ extern void type_change_detection(struct manifest *manifest);
 
 extern void rename_detection(struct manifest *manifest);
 extern void link_renames(GList *newfiles, int to_version);
-extern void __create_delta(struct file *file, int from_version, char *from_hash);
+extern void __create_delta(struct file *file, int from_version, int to_version, char *from_hash);
 
 extern void account_delta_hit(void);
 extern void account_delta_miss(void);
diff --git a/src/delta.c b/src/delta.c
index 974f862..c446f25 100644
--- a/src/delta.c
+++ b/src/delta.c
@@ -35,7 +35,7 @@
 #include "swupd.h"
 #include "xattrs.h"
 
-void __create_delta(struct file *file, int from_version, char *from_hash)
+void __create_delta(struct file *file, int from_version, int to_version, char *from_hash)
 {
 	char *original = NULL, *newfile = NULL, *outfile = NULL, *dotfile = NULL, *testnewfile = NULL, *conf = NULL;
 	char *tmpdir = NULL;
@@ -59,7 +59,7 @@ void __create_delta(struct file *file, int from_version, char *from_hash)
 	}
 
 	conf = config_image_base();
-	string_or_die(&newfile, "%s/%i/full/%s", conf, file->last_change, file->filename);
+	string_or_die(&newfile, "%s/%i/full/%s", conf, to_version, file->filename);
 
 	string_or_die(&original, "%s/%i/full/%s", conf, from_version, file->peer->filename);
 
diff --git a/src/pack.c b/src/pack.c
index 29c7758..94ba05d 100644
--- a/src/pack.c
+++ b/src/pack.c
@@ -37,6 +37,7 @@
 #include <unistd.h>
 
 #include "swupd.h"
+#include "xattrs.h"
 
 static void empty_pack_stage(int full, int from_version, int to_version, char *module)
 {
@@ -147,11 +148,44 @@ static void prepare_pack(struct packdata *pack)
 	link_renames(pack->end_manifest->files, pack->to);
 }
 
+static int stage_entry(struct file *file,
+		       const char *fullfrom, const char *fullto,
+		       const char *packname)
+{
+	int ret;
+
+	if (file->is_dir) {
+		/* Replicate directory. */
+		struct stat st;
+		if ((stat(fullfrom, &st) ||
+		     mkdir(fullto, 0) ||
+		     chmod(fullto, st.st_mode) ||
+		     chown(fullto, st.st_uid, st.st_gid) ||
+		     (xattrs_copy(fullfrom, fullto), false)) &&
+		    errno != EEXIST) {
+			LOG(NULL, "Failure to replicate dir for pack", "%s: %s to %s (%s) %i", packname, fullfrom, fullto, strerror(errno), errno);
+			rmdir(fullto);
+			ret = -1;
+		} else {
+			ret = 0;
+		}
+	} else {
+		ret = link(fullfrom, fullto);
+		if (ret && errno == EEXIST) {
+			ret = 0;
+		} else if (ret) {
+			LOG(NULL, "Failure to link for pack", "%s: %s to %s (%s) %i", packname, fullfrom, fullto, strerror(errno), errno);
+		}
+	}
+
+	return ret;
+}
+
+
 static void make_pack_full_files(struct packdata *pack)
 {
 	GList *item;
 	struct file *file;
-	int ret;
 
 	LOG(NULL, "starting pack full file creation", "%s: %d to %d",
 	    pack->module, pack->from, pack->to);
@@ -162,43 +196,17 @@ static void make_pack_full_files(struct packdata *pack)
 		file = item->data;
 		item = g_list_next(item);
 		if ((!file->peer || file->peer->is_deleted) && !file->is_deleted && !file->rename_peer) {
-			char *from, *to;
 			char *fullfrom, *fullto;
 
-			/* hardlink each file that is in <end> but not in <X> */
-			string_or_die(&fullfrom, "%s/%i/full/%s", image_dir, file->last_change, file->filename);
+			/* stage each entry that is in <end> but not in <X> */
+			string_or_die(&fullfrom, "%s/%i/full/%s", image_dir, pack->to, file->filename);
 			string_or_die(&fullto, "%s/%s/%i_to_%i/staged/%s", packstage_dir,
 				      pack->module, pack->from, pack->to, file->hash);
-			string_or_die(&from, "%s/%i/files/%s.tar", staging_dir, file->last_change, file->hash);
-			string_or_die(&to, "%s/%s/%i_to_%i/staged/%s.tar", packstage_dir,
-				      pack->module, pack->from, pack->to, file->hash);
 
-			ret = -1;
-			errno = 0;
-
-			/* Prefer to hardlink uncompressed files (excluding
-			 * directories) first, and fall back to the compressed
-			 * versions if the hardlink fails.
-			 */
-			if (!file->is_dir) {
-				ret = link(fullfrom, fullto);
-				if (ret && errno != EEXIST) {
-					LOG(NULL, "Failure to link for fullfile pack", "%s to %s (%s) %i", fullfrom, fullto, strerror(errno), errno);
-				}
-			}
-			if (ret) {
-				ret = link(from, to);
-				if (ret && errno != EEXIST) {
-					LOG(NULL, "Failure to link for fullfile pack", "%s to %s (%s) %i", from, to, strerror(errno), errno);
-				}
-			}
-
-			if (ret == 0) {
+			if (!stage_entry(file, fullfrom, fullto, "fullfile")) {
 				pack->fullcount++;
 			}
 
-			free(from);
-			free(to);
 			free(fullfrom);
 			free(fullto);
 		}
@@ -268,17 +276,18 @@ static GList *consolidate_packs_delta_files(GList *files, struct packdata *pack)
 	return files;
 }
 
-static void create_delta(gpointer data, __unused__ gpointer user_data)
+static void create_delta(gpointer data, gpointer user_data)
 {
 	struct file *file = data;
+	int *to_version = user_data;
 
 	/* if the file was not found in the from version, skip delta creation */
 	if (file->peer) {
-		__create_delta(file, file->peer->last_change, file->peer->hash);
+		__create_delta(file, file->peer->last_change, *to_version, file->peer->hash);
 	}
 }
 
-static void make_pack_deltas(GList *files)
+static void make_pack_deltas(GList *files, int to_version)
 {
 	GThreadPool *threadpool;
 	GList *item;
@@ -288,7 +297,7 @@ static void make_pack_deltas(GList *files)
 	int numthreads = num_threads(1.0);
 
 	LOG(NULL, "pack deltas threadpool", "%d threads", numthreads);
-	threadpool = g_thread_pool_new(create_delta, NULL,
+	threadpool = g_thread_pool_new(create_delta, &to_version,
 				       numthreads, FALSE, NULL);
 
 	item = g_list_first(files);
@@ -345,7 +354,7 @@ static int make_final_pack(struct packdata *pack)
 			      file->last_change, file->hash);
 		string_or_die(&tarto, "%s/%s/%i_to_%i/staged/%s.tar", packstage_dir,
 			      pack->module, pack->from, pack->to, file->hash);
-		string_or_die(&fullfrom, "%s/%i/full/%s", image_dir, file->last_change, file->filename);
+		string_or_die(&fullfrom, "%s/%i/full/%s", image_dir, pack->to, file->filename);
 		string_or_die(&fullto, "%s/%s/%i_to_%i/staged/%s", packstage_dir,
 			      pack->module, pack->from, pack->to, file->hash);
 
@@ -379,27 +388,7 @@ static int make_final_pack(struct packdata *pack)
 				}
 			}
 		} else {
-			ret = -1;
-			errno = 0;
-
-			/* Prefer to hardlink uncompressed files (excluding
-			 * directories) first, and fall back to the compressed
-			 * versions if the hardlink fails.
-			 */
-			if (!file->is_dir) {
-				ret = link(fullfrom, fullto);
-				if (ret && errno != EEXIST) {
-					LOG(NULL, "Failure to link for final pack", "%s to %s (%s) %i\n", fullfrom, fullto, strerror(errno), errno);
-				}
-			}
-
-			if (ret) {
-				ret = link(tarfrom, tarto);
-				if (ret && errno != EEXIST) {
-					LOG(NULL, "Failure to link for final pack", "%s to %s (%s) %i\n", tarfrom, tarto, strerror(errno), errno);
-				}
-			}
-
+			ret = stage_entry(file, fullfrom, fullto, "final");
 			if (ret == 0) {
 				pack->fullcount++;
 			}
@@ -510,7 +499,7 @@ int make_pack(struct packdata *pack)
 
 	/* step 2: consolidate delta list & create all delta files*/
 	delta_list = consolidate_packs_delta_files(delta_list, pack);
-	make_pack_deltas(delta_list);
+	make_pack_deltas(delta_list, pack->to);
 	g_list_free(delta_list);
 
 	/* step 3: complete pack creation */
-- 
2.11.0

