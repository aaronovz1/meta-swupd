From 03be0cd467b397d10407d08f762f777d65186f9e Mon Sep 17 00:00:00 2001
From: Patrick Ohly <patrick.ohly@intel.com>
Date: Tue, 8 Nov 2016 18:39:49 +0100
Subject: [PATCH 4/6] create_pack: download via libcurl+libarchive

By using libcurl and libarchive directly, the dependency on external
tools can be avoided. To avoid buffering the entire archive in memory
or on disk, both libs get called in different threads and the buffer
handed to swupd by libcurl in one thread is passed to libarchive in
the other thread via some shared struct.

Signed-off-by: Patrick Ohly <patrick.ohly@intel.com>
---
 Makefile.am             |  12 +-
 configure.ac            |   1 +
 include/curl_helper.h   |  34 ++++
 include/swupd.h         |   1 +
 src/curl_helper.c       | 425 ++++++++++++++++++++++++++++++++++++++++++++++++
 src/delta.c             |  13 +-
 src/in_memory_archive.c |   1 +
 src/make_packs.c        |   2 +
 8 files changed, 477 insertions(+), 12 deletions(-)
 create mode 100644 include/curl_helper.h
 create mode 100644 src/curl_helper.c

diff --git a/Makefile.am b/Makefile.am
index abe6417..56b96f1 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -16,6 +16,7 @@ swupd_create_update_SOURCES = \
 	src/chroot.c \
 	src/config.c \
 	src/create_update.c \
+	src/curl_helper.c \
 	src/delta.c \
 	src/fullfiles.c \
 	src/globals.c \
@@ -35,6 +36,7 @@ swupd_create_update_SOURCES = \
 swupd_make_pack_SOURCES = \
 	src/analyze_fs.c \
 	src/config.c \
+	src/curl_helper.c \
 	src/delta.c \
 	src/globals.c \
 	src/groups.c \
@@ -50,6 +52,7 @@ swupd_make_pack_SOURCES = \
 swupd_make_fullfiles_SOURCES = \
 	src/analyze_fs.c \
 	src/config.c \
+	src/curl_helper.c \
 	src/delta.c \
 	src/fullfiles.c \
 	src/globals.c \
@@ -64,10 +67,12 @@ swupd_make_fullfiles_SOURCES = \
 	src/stats.c \
 	src/xattrs.c
 
-AM_CPPFLAGS = $(glib_CFLAGS) $(libarchive_CFLAGS) -I$(top_srcdir)/include
+AM_CPPFLAGS = $(glib_CFLAGS) $(libarchive_CFLAGS) $(libcurl_CFLAGS) -I$(top_srcdir)/include
 
 swupd_create_update_LDADD = \
 	$(glib_LIBS) \
+        $(libcurl_LIBS) \
+	$(libarchive_LIBS) \
 	$(zlib_LIBS) \
 	$(openssl_LIBS) \
 	$(libarchive_LIBS) \
@@ -75,15 +80,18 @@ swupd_create_update_LDADD = \
 
 swupd_make_pack_LDADD = \
 	$(glib_LIBS) \
+        $(libcurl_LIBS) \
+	$(libarchive_LIBS) \
 	$(zlib_LIBS) \
 	$(openssl_LIBS) \
 	$(bsdiff_LIBS)
 
 swupd_make_fullfiles_LDADD = \
 	$(glib_LIBS) \
+        $(libcurl_LIBS) \
+	$(libarchive_LIBS) \
 	$(zlib_LIBS) \
 	$(openssl_LIBS) \
-	$(libarchive_LIBS) \
 	$(bsdiff_LIBS)
 
 if ENABLE_LZMA
diff --git a/configure.ac b/configure.ac
index 87de6df..fb918c1 100644
--- a/configure.ac
+++ b/configure.ac
@@ -37,6 +37,7 @@ AC_ARG_ENABLE(
 	AC_DEFINE([SWUPD_WITH_BSDTAR], 0, [Use default tar command])
 )
 PKG_CHECK_MODULES([libarchive], [libarchive])
+PKG_CHECK_MODULES([libcurl], [libcurl])
 
 AC_ARG_ENABLE(
   [tests],
diff --git a/include/curl_helper.h b/include/curl_helper.h
new file mode 100644
index 0000000..8105967
--- /dev/null
+++ b/include/curl_helper.h
@@ -0,0 +1,34 @@
+/*
+ *   Software Updater - server side
+ *
+ *      Copyright © 2017 Intel Corporation.
+ *
+ *   This program is free software: you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation, version 2 or later of the License.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *   Authors:
+ *         Patrick Ohly <patrick.ohly@intel.com>
+ *
+ */
+
+#ifndef __INCLUDE_GUARD_LIBCURL_HELPER_H
+#define __INCLUDE_GUARD_LIBCURL_HELPER_H
+
+void curl_helper_free();
+int curl_helper_unpack_tar(const char *url, const char *target_dir);
+
+enum {
+	CURL_HELPER_OKAY = 0,
+	CURL_HELPER_FAILURE
+};
+
+#endif /* __INCLUDE_GUARD_LIBCURL_HELPER_H */
diff --git a/include/swupd.h b/include/swupd.h
index cf3c3b2..d4eadd4 100644
--- a/include/swupd.h
+++ b/include/swupd.h
@@ -243,6 +243,7 @@ extern void consolidate_submanifests(struct manifest *manifest);
 extern void populate_file_struct(struct file *file, char *filename);
 extern void download_exta_base_content(void);
 
+struct timeval;
 extern char *get_elapsed_time(struct timeval *t1, struct timeval *t2);
 extern void init_log(const char *prefix, const char *bundle, int start, int end);
 extern void init_log_stdout(void);
diff --git a/src/curl_helper.c b/src/curl_helper.c
new file mode 100644
index 0000000..8103755
--- /dev/null
+++ b/src/curl_helper.c
@@ -0,0 +1,425 @@
+/*
+ *   Software Updater - server side
+ *
+ *      Copyright © 2016 Intel Corporation.
+ *
+ *   This program is free software: you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation, version 2 or later of the License.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *   Authors:
+ *         Patrick Ohly <patrick.ohly@intel.com>
+ *
+ */
+
+#include <glib.h>
+#include <curl/curl.h>
+#include <archive.h>
+#include <archive_entry.h>
+#include <stdlib.h>
+
+#include "curl_helper.h"
+#include "swupd.h"
+
+static GOnce curl_helper_once = G_ONCE_INIT;
+static GThreadPool *curl_helper_pool;
+
+static void curl_helper_perform(gpointer data, gpointer user_data);
+
+static gpointer curl_helper_init_once(gpointer __unused__ unused)
+{
+	curl_global_init(CURL_GLOBAL_ALL);
+	/*
+	 * We allow creating as many additional threads as needed to
+	 * match the number of active curl_helper_unpack_tar() calls.
+	 * That way each call is guaranteed to make progress.
+	 * glib will allocate additional threads, even if the other
+	 * non-exclusive thread pools have a limit.
+	 */
+	curl_helper_pool = g_thread_pool_new(curl_helper_perform, NULL,
+					     -1, FALSE, NULL);
+
+	return 0;
+}
+
+/**
+ * Allocate and initialize global state for use of curl. Because curl
+ * might not be needed at all, this function may be called more than
+ * once and is guaranteed to be thread-safe.
+ */
+void curl_helper_init()
+{
+	g_once(&curl_helper_once, curl_helper_init_once, 0);
+}
+
+/**
+ * Free resources that might (or might not) have been allocated.
+ * Not thread-safe.
+ */
+void curl_helper_free()
+{
+	if (curl_helper_once.status == G_ONCE_STATUS_READY) {
+		curl_global_cleanup();
+		g_thread_pool_free(curl_helper_pool, false, false);
+		curl_helper_once.status = G_ONCE_STATUS_READY;
+	}
+}
+
+/** Used for buffering data between threads. */
+#define CURL_HELPER_TRANSFER_SIZE (1 * 1024 * 1024)
+
+struct curl_helper_transfer
+{
+	CURL *curl;
+
+	/* Protects the following struct members. */
+	GMutex mutex;
+	GCond cond;
+
+	/**
+	 * We do zero-copy by letting libarchive process directly the
+	 * buffer handed in by libcurl. It is debatable whether zero-copy
+	 * with higher overhead for context switching is more efficient
+	 * than double-buffering with more memcpy. Zero-copy is probably
+	 * a bit less code.
+	 *
+	 * The buffer is set while we have data ready to be processed.
+	 * Writing blocks in libcurl until the data is fully handled.
+	 */
+	const char *buffer;
+
+	/** Number of bytes in buffer. */
+	size_t available;
+
+	/** True while libarchive is working on the buffer. */
+	bool processing;
+
+	/** True while data is coming in. */
+	bool writing;
+
+	/** True while data is taken out. */
+	bool reading;
+
+	/** Result and message only valid when not writing anymore. */
+	CURLcode res;
+	char message[CURL_ERROR_SIZE];
+};
+
+struct curl_helper_transfer *
+curl_helper_transfer_new()
+{
+	struct curl_helper_transfer *transfer;
+
+	transfer = calloc(1, sizeof(*transfer));
+	g_mutex_init(&transfer->mutex);
+	g_cond_init(&transfer->cond);
+	transfer->writing = true;
+	transfer->reading = true;
+	return transfer;
+}
+
+static size_t
+curl_helper_transfer_write(char *ptr, size_t size, size_t nmemb, void *userdata)
+{
+	struct curl_helper_transfer *transfer = userdata;
+	size_t written;
+
+	g_mutex_lock(&transfer->mutex);
+	if (transfer->reading) {
+		static const char empty_buffer[1];
+		/*
+		 * Hand over new buffer and wait until reader is done
+		 * with it. We need a valid buffer pointer even when
+		 * no data was coming in from libcurl.
+		 */
+		transfer->buffer = ptr ? ptr : empty_buffer;
+		written = size * nmemb;
+		transfer->available = written;
+		g_cond_signal(&transfer->cond);
+		while (transfer->buffer) {
+			g_cond_wait(&transfer->cond, &transfer->mutex);
+		}
+	} else {
+		/* Error, reader is gone but we still have data. */
+		written = 0;
+	}
+	g_mutex_unlock(&transfer->mutex);
+	return written;
+}
+
+static ssize_t curl_helper_transfer_read(struct archive __unused__ *a, void *client_data, const void **buff)
+{
+	struct curl_helper_transfer *transfer = client_data;
+	ssize_t read;
+
+	g_mutex_lock(&transfer->mutex);
+	if (transfer->processing) {
+		/* Tell writer that we are done with the previous buffer. */
+		transfer->buffer = NULL;
+		transfer->processing = false;
+		g_cond_signal(&transfer->cond);
+	}
+
+	while (!transfer->buffer && transfer->writing) {
+		/* Wait for next buffer or end of writing. */
+		g_cond_wait(&transfer->cond, &transfer->mutex);
+	}
+
+	if (transfer->buffer) {
+		/* Process next chunk. */
+		*buff = transfer->buffer;
+		read = transfer->available;
+		transfer->processing = true;
+	} else if (transfer->res == CURLE_OK) {
+		/* Normal EOF. */
+		read = 0;
+	} else {
+		/* Signal error. */
+		read = -1;
+	}
+	g_mutex_unlock(&transfer->mutex);
+
+	return read;
+}
+
+static int curl_helper_transfer_close(struct archive __unused__ *a, void *client_data)
+{
+	struct curl_helper_transfer *transfer = client_data;
+
+	g_mutex_lock(&transfer->mutex);
+	if (transfer->processing) {
+		transfer->buffer = NULL;
+		transfer->processing = false;
+	}
+	transfer->reading = false;
+	g_cond_signal(&transfer->cond);
+	g_mutex_unlock(&transfer->mutex);
+
+	return ARCHIVE_OK;
+}
+
+static int curl_helper_copy_data(struct archive *ar, struct archive *aw)
+{
+	int r;
+	const void *buffer;
+	size_t size;
+	off_t offset;
+
+	for (;;) {
+		r = archive_read_data_block(ar, &buffer, &size, &offset);
+		if (r == ARCHIVE_EOF) {
+			return ARCHIVE_OK;
+		} else if (r != ARCHIVE_OK) {
+			LOG(NULL, "Error reading data from archive: %s", archive_error_string(ar));
+			return r;
+		}
+
+		r = archive_write_data_block(aw, buffer, size, offset);
+		if (r != ARCHIVE_OK) {
+			LOG(NULL, "Error writing data from archive: %s", archive_error_string(aw));
+			return r;
+		}
+	}
+}
+
+/**
+ * Retrieves the file identified by the url and directly unpacks
+ * the archive with libarchive inside the target directory.
+ * Thread-safe.
+ */
+int curl_helper_unpack_tar(const char *url, const char *target_dir)
+{
+	struct curl_helper_transfer *transfer = NULL;
+	int ret = CURL_HELPER_FAILURE;
+	const char *cainfo;
+	struct archive *a = NULL, *ext = NULL;
+	struct archive_entry *entry;
+	int r;
+	int flags;
+
+	curl_helper_init();
+
+	/*
+	 * Both libcurl and libarchive want to be in control. There's
+	 * no way how a single thread can get some data out of libcurl
+	 * (pull) and hand it over to libarchive (push) for further
+	 * processing: libcurl wants to push, and libarchive wants to
+	 * pull. To get around this, we put libcurl processing into a
+	 * helper thread which copies data into a buffer which gets
+	 * drained by the libarchive read callbacks.
+	 */
+	transfer = curl_helper_transfer_new();
+	transfer->curl = curl_easy_init();
+	if (!transfer->curl) {
+		goto error;
+	}
+	curl_easy_setopt(transfer->curl, CURLOPT_URL, url);
+	curl_easy_setopt(transfer->curl, CURLOPT_ERRORBUFFER, transfer->message);
+	curl_easy_setopt(transfer->curl, CURLOPT_WRITEFUNCTION, curl_helper_transfer_write);
+	curl_easy_setopt(transfer->curl, CURLOPT_WRITEDATA, transfer);
+	/*
+	 * Mirror the behavior of curl and check CURL_CA_BUNDLE.
+	 * This is relevant for builds under OpenEmbedded, where the
+	 * builtin default path becomes invalid when moving the
+	 * native binary from one build machine to another (YOCTO #9883),
+	 * but may also be useful for pointing swupd to a self-signed
+	 * certificate that isn't installed on the system.
+	 */
+	cainfo = getenv("CURL_CA_BUNDLE");
+	if (cainfo && cainfo[0]) {
+		curl_easy_setopt(transfer->curl, CURLOPT_CAINFO, cainfo);
+	}
+
+	a = archive_read_new();
+	if (!a) {
+		LOG(NULL, "Failed to allocate archive for reading.", "");
+		goto error;
+	}
+
+	/* Set which attributes we want to restore. */
+	flags = ARCHIVE_EXTRACT_TIME;
+	flags |= ARCHIVE_EXTRACT_PERM;
+	flags |= ARCHIVE_EXTRACT_OWNER;
+	flags |= ARCHIVE_EXTRACT_XATTR;
+
+	/* Set security flags. However, ultimately the server trusts
+	 * the content of the archive to be correct. */
+	flags |= ARCHIVE_EXTRACT_SECURE_SYMLINKS;
+	flags |= ARCHIVE_EXTRACT_SECURE_NODOTDOT;
+
+	/* Limit parsing to tar. */
+	r = archive_read_support_format_tar(a);
+	if (r != ARCHIVE_OK) {
+		LOG(NULL, "Could not initialize tar processing", "%s", archive_error_string(a));
+		goto error;
+	}
+
+	/* All compression methods. */
+	r = archive_read_support_filter_all(a);
+	if (r != ARCHIVE_OK) {
+		LOG(NULL, "Could not initialize decompression", "%s", archive_error_string(a));
+		goto error;
+	}
+
+	/* set up write */
+	ext = archive_write_disk_new();
+	if (!ext) {
+		LOG(NULL, "Failed to allocate archive for writing.", "");
+		goto error;
+	}
+
+	r = archive_write_disk_set_options(ext, flags);
+	if (r != ARCHIVE_OK) {
+		LOG(NULL, "Failed to set archive write options", "%s", archive_error_string(ext));
+		goto error;
+	}
+
+	r = archive_write_disk_set_standard_lookup(ext);
+	if (r != ARCHIVE_OK) {
+		LOG(NULL, "Failed to set archive write options", "%s", archive_error_string(ext));
+		goto error;
+	}
+
+	/* Start data transfer for real now. */
+	g_thread_pool_push(curl_helper_pool, transfer, NULL);
+	r = archive_read_open(a, transfer, NULL, curl_helper_transfer_read, curl_helper_transfer_close);
+	if (r != ARCHIVE_OK) {
+		LOG(NULL, "Failed to initialize archive reading", "%s", archive_error_string(a));
+		goto error;
+	}
+	for (;;) {
+		r = archive_read_next_header(a, &entry);
+		if (r == ARCHIVE_EOF) {
+			/* Reached end of archive without errors. */
+			ret = CURL_HELPER_OKAY;
+			break;
+		} else if (r != ARCHIVE_OK) {
+			LOG(NULL, "Error while looking for next archive entry", "%s", archive_error_string(a));
+			goto error_writing;
+		}
+
+		/* Set output directory. */
+		char *fullpath;
+		string_or_die(&fullpath, "%s/%s", target_dir, archive_entry_pathname(entry));
+		archive_entry_set_pathname(entry, fullpath);
+		free(fullpath);
+
+		/* Write archive header, if successful continue to copy data. */
+		r = archive_write_header(ext, entry);
+		if (r != ARCHIVE_OK) {
+			LOG(NULL, "Error creating archive entry", "%s", archive_error_string(ext));
+			goto error_writing;
+		}
+
+		if (archive_entry_size(entry) > 0) {
+			r = curl_helper_copy_data(a, ext);
+			if (r != ARCHIVE_OK) {
+				LOG(NULL, "Error copying archive data", "%s");
+				goto error_writing;
+			}
+		}
+
+		/* Flush pending file attribute changes. */
+		r = archive_write_finish_entry(ext);
+		if (r != ARCHIVE_OK) {
+			LOG(NULL, "Error closing archive entry", "%s", archive_error_string(ext));
+			goto error_writing;
+		}
+	}
+	r = archive_write_close(ext);
+	if (r != ARCHIVE_OK) {
+		LOG(NULL, "Error closing the write archive", "%s", archive_error_string(ext));
+		goto error_writing;
+	}
+
+ error_writing:
+	/* We started the data transfer, so now we must wait for the libcurl thread to stop writing. */
+	g_mutex_lock(&transfer->mutex);
+	if (transfer->processing) {
+		transfer->buffer = NULL;
+		transfer->processing = false;
+	}
+	transfer->reading = false;
+	g_cond_signal(&transfer->cond);
+	while (transfer->writing) {
+		g_cond_wait(&transfer->cond, &transfer->mutex);
+	}
+	g_mutex_unlock(&transfer->mutex);
+	if (transfer->res != CURLE_OK) {
+		LOG(NULL, "Archive download error", "%s", transfer->message);
+	}
+
+ error:
+	if (ext) {
+		archive_write_free(ext);
+	}
+	if (a) {
+		archive_read_free(a);
+	}
+	if (transfer) {
+		free(transfer);
+	}
+	return ret;
+}
+
+static void curl_helper_perform(gpointer data, gpointer __unused__ user_data)
+{
+	struct curl_helper_transfer *transfer = (struct curl_helper_transfer *)data;
+	CURLcode res;
+
+	res = curl_easy_perform(transfer->curl);
+
+	g_mutex_lock(&transfer->mutex);
+	transfer->res = res;
+	transfer->writing = false;
+	g_cond_signal(&transfer->cond);
+	g_mutex_unlock(&transfer->mutex);
+}
diff --git a/src/delta.c b/src/delta.c
index 058b94e..843d6c3 100644
--- a/src/delta.c
+++ b/src/delta.c
@@ -35,6 +35,7 @@
 
 #include "swupd.h"
 #include "xattrs.h"
+#include "curl_helper.h"
 
 void __create_delta(struct file *file, int from_version, int to_version, char *from_hash)
 {
@@ -126,19 +127,11 @@ void __create_delta(struct file *file, int from_version, int to_version, char *f
 		delete_original = true;
 
 		/*
-		 * This is a proof-of-concept. A real implementation should use
-		 * a combination of libcurl + libarchive calls to unpack the files.
-		 * For current Ostro OS, deltas despite xattr differences would
-		 * be needed, otherwise this code here is of little use (all
-		 * modified files fail the xattr sameness check, because security.ima
-		 * changes when file content changes).
+		 * Download and unpack.
 		 */
 		string_or_die(&url, "%s/%d/files/%s.tar", content_url, from_version, last_hash);
 		LOG(file, "Downloading original file", "%s to %s", url, original);
-
-		/* bsdtar can detect compression when reading from stdin, GNU tar can't. */
-		string_or_die(&cmd, "curl -s %s | bsdtar -C %s -xf -", url, tmpdir);
-		if (system(cmd)) {
+		if (curl_helper_unpack_tar(url, tmpdir)) {
 			LOG(file, "Downloading/unpacking failed, skipping delta", "%s", url);
 			goto out;
 		}
diff --git a/src/in_memory_archive.c b/src/in_memory_archive.c
index abd7e54..079ab10 100644
--- a/src/in_memory_archive.c
+++ b/src/in_memory_archive.c
@@ -22,6 +22,7 @@
 
 #include <errno.h>
 #include <stdlib.h>
+#include <string.h>
 
 #include "libarchive_helper.h"
 
diff --git a/src/make_packs.c b/src/make_packs.c
index 6434224..6e7a414 100644
--- a/src/make_packs.c
+++ b/src/make_packs.c
@@ -35,6 +35,7 @@
 #include <unistd.h>
 
 #include "swupd.h"
+#include "curl_helper.h"
 
 static void banner(void)
 {
@@ -164,5 +165,6 @@ int main(int argc, char **argv)
 	       module, start_version, end_version);
 
 	free_state_globals();
+	curl_helper_free();
 	return exit_status;
 }
-- 
2.11.0

